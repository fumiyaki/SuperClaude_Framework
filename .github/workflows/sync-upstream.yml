name: 🔄 Upstream同期＆翻訳管理

on:
  # 手動実行
  workflow_dispatch:
    inputs:
      create_pr:
        description: 'PRを自動作成する'
        required: false
        default: 'true'
        type: choice
        options:
          - true
          - false
  
  # 定期実行（毎週月曜日の朝9時JST）
  schedule:
    - cron: '0 0 * * MON'  # UTC 0:00 = JST 9:00

jobs:
  sync-and-detect:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      
    steps:
      - name: 📥 リポジトリをチェックアウト
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 🔗 Upstreamリポジトリを設定
        run: |
          # 元のリポジトリをupstreamとして追加
          git remote add upstream https://github.com/anthropics/claude-code.git || true
          git fetch upstream
          echo "✅ Upstream設定完了"
      
      - name: 📊 現在の状態を確認
        run: |
          echo "## 現在のブランチ情報"
          git branch -a
          echo ""
          echo "## リモート情報"
          git remote -v
          
      - name: 🔄 Upstreamの変更を取得
        id: sync
        continue-on-error: true
        run: |
          # 新しいブランチを作成
          BRANCH_NAME="sync-upstream-$(date +%Y%m%d-%H%M%S)"
          git checkout -b $BRANCH_NAME
          
          # Git設定
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config user.name "GitHub Actions Bot"
          
          # マージを試みる
          echo "## マージステータス" > merge_report.md
          if git merge upstream/master --no-edit; then
            echo "merge_status=success" >> $GITHUB_OUTPUT
            echo "✅ マージ成功" >> merge_report.md
          else
            echo "merge_status=conflict" >> $GITHUB_OUTPUT
            echo "⚠️ マージコンフリクトが発生しました" >> merge_report.md
            echo "" >> merge_report.md
            echo "### コンフリクトファイル一覧" >> merge_report.md
            git diff --name-only --diff-filter=U | while read file; do
              echo "- \`$file\`" >> merge_report.md
            done
            echo "" >> merge_report.md
            echo "コンフリクト解決が必要です。以下のコマンドで確認してください：" >> merge_report.md
            echo '```bash' >> merge_report.md
            echo "git status" >> merge_report.md
            echo "git diff" >> merge_report.md
            echo '```' >> merge_report.md
            
            # コンフリクトがある場合も変更検出のために続行
            git add -A
            git commit -m "🔄 Upstream同期（コンフリクトあり）: $(date +%Y-%m-%d)"
          fi
          
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
      - name: 🔍 変更されたMDファイルを検出
        id: detect-changes
        run: |
          # 変更されたMDファイルをリストアップ
          echo "## 📝 変更されたMarkdownファイル" > diff_report.md
          echo "" >> diff_report.md
          
          # マージレポートがある場合は追加
          if [ -f merge_report.md ]; then
            cat merge_report.md >> diff_report.md
            echo "" >> diff_report.md
            echo "---" >> diff_report.md
            echo "" >> diff_report.md
          fi
          
          # 日本語版と英語版を分けて検出（追加・修正・削除を全て含む）
          echo "### 🔤 英語版（翻訳が必要）" >> diff_report.md
          
          # 追加されたファイル
          git diff --name-only --diff-filter=A HEAD...upstream/master | grep "\.md$" | grep -v "\.ja\.md$" > english_added.txt || true
          # 修正されたファイル
          git diff --name-only --diff-filter=M HEAD...upstream/master | grep "\.md$" | grep -v "\.ja\.md$" > english_modified.txt || true
          # 削除されたファイル
          git diff --name-only --diff-filter=D HEAD...upstream/master | grep "\.md$" | grep -v "\.ja\.md$" > english_deleted.txt || true
          
          # 全ての変更をまとめる
          cat english_added.txt english_modified.txt english_deleted.txt > english_changed.txt 2>/dev/null || touch english_changed.txt
          
          if [ -s english_added.txt ]; then
            echo "" >> diff_report.md
            echo "#### ➕ 新規追加" >> diff_report.md
            cat english_added.txt | while read file; do
              echo "- [ ] \`$file\` 🆕" >> diff_report.md
              ja_file="${file%.md}.ja.md"
              echo "  - ⚠️ 新規翻訳が必要" >> diff_report.md
            done
          fi
          
          if [ -s english_modified.txt ]; then
            echo "" >> diff_report.md
            echo "#### ✏️ 修正" >> diff_report.md
            cat english_modified.txt | while read file; do
              echo "- [ ] \`$file\`" >> diff_report.md
              ja_file="${file%.md}.ja.md"
              if [ -f "$ja_file" ]; then
                echo "  - 対応する日本語ファイル: \`$ja_file\` ✅" >> diff_report.md
              else
                echo "  - ⚠️ 対応する日本語ファイルなし（新規作成が必要）" >> diff_report.md
              fi
            done
          fi
          
          if [ -s english_deleted.txt ]; then
            echo "" >> diff_report.md
            echo "#### 🗑️ 削除" >> diff_report.md
            cat english_deleted.txt | while read file; do
              echo "- \`$file\` ❌" >> diff_report.md
              ja_file="${file%.md}.ja.md"
              if [ -f "$ja_file" ]; then
                echo "  - ⚠️ 日本語ファイル \`$ja_file\` の削除を検討" >> diff_report.md
              fi
            done
          fi
          
          if [ ! -s english_changed.txt ]; then
            echo "*変更なし*" >> diff_report.md
          fi
          
          echo "" >> diff_report.md
          echo "### 🇯🇵 既存の日本語版（確認推奨）" >> diff_report.md
          git diff --name-only --diff-filter=AMD HEAD...upstream/master | grep "\.ja\.md$" > japanese_changed.txt || true
          
          if [ -s japanese_changed.txt ]; then
            cat japanese_changed.txt | while read file; do
              echo "- \`$file\`" >> diff_report.md
            done
          else
            echo "*変更なし*" >> diff_report.md
          fi
          
          # 統計情報
          echo "" >> diff_report.md
          echo "## 📊 統計情報" >> diff_report.md
          added_count=$(wc -l < english_added.txt 2>/dev/null || echo 0)
          modified_count=$(wc -l < english_modified.txt 2>/dev/null || echo 0)
          deleted_count=$(wc -l < english_deleted.txt 2>/dev/null || echo 0)
          english_count=$(wc -l < english_changed.txt 2>/dev/null || echo 0)
          japanese_count=$(wc -l < japanese_changed.txt 2>/dev/null || echo 0)
          
          echo "- 🆕 新規追加された英語ファイル: $added_count 件" >> diff_report.md
          echo "- ✏️ 修正された英語ファイル: $modified_count 件" >> diff_report.md
          echo "- 🗑️ 削除された英語ファイル: $deleted_count 件" >> diff_report.md
          echo "- 🔤 翻訳が必要な英語ファイル（合計）: $english_count 件" >> diff_report.md
          echo "- 🇯🇵 更新された日本語ファイル: $japanese_count 件" >> diff_report.md
          
          # マージステータスも追加
          if [ "${{ steps.sync.outputs.merge_status }}" == "conflict" ]; then
            echo "- ⚠️ **マージコンフリクトあり**" >> diff_report.md
          fi
          
          # 差分の詳細を追加
          echo "" >> diff_report.md
          echo "## 📋 差分詳細" >> diff_report.md
          echo "" >> diff_report.md
          
          if [ -s english_changed.txt ]; then
            echo "<details>" >> diff_report.md
            echo "<summary>変更内容の詳細（クリックで展開）</summary>" >> diff_report.md
            echo "" >> diff_report.md
            
            cat english_changed.txt | while read file; do
              echo "### \`$file\`" >> diff_report.md
              if [ -f "$file" ]; then
                echo '```diff' >> diff_report.md
                git diff HEAD...upstream/master -- "$file" | head -100 >> diff_report.md || echo "（差分取得エラー）" >> diff_report.md
                echo '```' >> diff_report.md
              else
                echo "*ファイルが削除されました*" >> diff_report.md
              fi
              echo "" >> diff_report.md
            done
            
            echo "</details>" >> diff_report.md
          fi
          
          # 出力を設定
          echo "has_changes=$([[ $english_count -gt 0 || $japanese_count -gt 0 ]] && echo true || echo false)" >> $GITHUB_OUTPUT
          echo "english_count=$english_count" >> $GITHUB_OUTPUT
          echo "japanese_count=$japanese_count" >> $GITHUB_OUTPUT
          echo "added_count=$added_count" >> $GITHUB_OUTPUT
          echo "modified_count=$modified_count" >> $GITHUB_OUTPUT
          echo "deleted_count=$deleted_count" >> $GITHUB_OUTPUT
          echo "has_conflicts=$([[ "${{ steps.sync.outputs.merge_status }}" == "conflict" ]] && echo true || echo false)" >> $GITHUB_OUTPUT
          
      - name: 📝 翻訳ヘルパースクリプトを生成
        if: steps.detect-changes.outputs.has_changes == 'true'
        run: |
          cat > translate_helper.sh << 'EOF'
          #!/bin/bash
          
          echo "🌸 翻訳ヘルパースクリプト"
          echo "========================"
          echo ""
          
          # ファイルの存在確認
          if [ ! -f english_changed.txt ] && [ ! -f english_added.txt ] && [ ! -f english_modified.txt ]; then
            echo "変更されたファイルが見つかりません。"
            exit 1
          fi
          
          echo "📊 変更サマリー"
          echo "--------------"
          
          if [ -f english_added.txt ] && [ -s english_added.txt ]; then
            echo "🆕 新規追加ファイル:"
            cat english_added.txt | while read file; do
              echo "  - $file"
            done
            echo ""
          fi
          
          if [ -f english_modified.txt ] && [ -s english_modified.txt ]; then
            echo "✏️ 修正されたファイル:"
            cat english_modified.txt | while read file; do
              echo "  - $file"
            done
            echo ""
          fi
          
          if [ -f english_deleted.txt ] && [ -s english_deleted.txt ]; then
            echo "🗑️ 削除されたファイル:"
            cat english_deleted.txt | while read file; do
              echo "  - $file"
            done
            echo ""
          fi
          
          echo "翻訳作業の詳細:"
          echo "==============="
          
          # 新規追加ファイルの処理
          if [ -f english_added.txt ] && [ -s english_added.txt ]; then
            for file in $(cat english_added.txt); do
              ja_file="${file%.md}.ja.md"
              echo ""
              echo "-----------------------------------"
              echo "🆕 新規追加: $file"
              echo "📝 日本語版: $ja_file"
              echo ""
              echo "以下のコマンドで日本語ファイルを作成:"
              echo "  cp $file $ja_file"
              echo "  # その後、$ja_file を翻訳"
            done
          fi
          
          # 修正されたファイルの処理
          if [ -f english_modified.txt ] && [ -s english_modified.txt ]; then
            for file in $(cat english_modified.txt); do
              ja_file="${file%.md}.ja.md"
              echo ""
              echo "-----------------------------------"
              echo "✏️ 修正: $file"
              echo "📝 日本語版: $ja_file"
              echo ""
              
              if [ -f "$ja_file" ]; then
                echo "✅ 日本語ファイルが存在します"
                echo "以下のコマンドで差分を確認:"
                echo "  git diff HEAD...upstream/master -- $file"
              else
                echo "⚠️  日本語ファイルが存在しません"
                echo "新規作成が必要です:"
                echo "  cp $file $ja_file"
                echo "  # その後、$ja_file を翻訳"
              fi
            done
          fi
          
          # 削除されたファイルの処理
          if [ -f english_deleted.txt ] && [ -s english_deleted.txt ]; then
            for file in $(cat english_deleted.txt); do
              ja_file="${file%.md}.ja.md"
              echo ""
              echo "-----------------------------------"
              echo "🗑️ 削除: $file"
              
              if [ -f "$ja_file" ]; then
                echo "⚠️  対応する日本語ファイルが存在: $ja_file"
                echo "削除を検討してください:"
                echo "  git rm $ja_file"
              fi
            done
          fi
          
          echo ""
          echo "================================"
          echo "✨ 翻訳作業頑張ってください！"
          EOF
          
          chmod +x translate_helper.sh
          
      - name: 💾 変更をコミット
        if: steps.detect-changes.outputs.has_changes == 'true'
        run: |
          # レポートと補助ファイルを追加
          git add diff_report.md translate_helper.sh english_*.txt japanese_changed.txt merge_report.md 2>/dev/null || true
          
          # 変更をコミット
          if [ -n "$(git status --porcelain)" ]; then
            if [ "${{ steps.detect-changes.outputs.has_conflicts }}" == "true" ]; then
              commit_msg="🔄 Upstream同期（コンフリクトあり）: $(date +%Y-%m-%d)"
            else
              commit_msg="🔄 Upstream同期: $(date +%Y-%m-%d)"
            fi
            
            git commit -m "$commit_msg
            
            新規追加: ${{ steps.detect-changes.outputs.added_count }} 件
            修正: ${{ steps.detect-changes.outputs.modified_count }} 件
            削除: ${{ steps.detect-changes.outputs.deleted_count }} 件
            翻訳が必要な英語ファイル: ${{ steps.detect-changes.outputs.english_count }} 件
            更新された日本語ファイル: ${{ steps.detect-changes.outputs.japanese_count }} 件
            
            詳細は diff_report.md を確認してください。"
            
            git push origin ${{ steps.sync.outputs.branch_name }}
          fi
          
      - name: 🎯 プルリクエストを作成
        if: steps.detect-changes.outputs.has_changes == 'true' && (github.event_name == 'schedule' || github.event.inputs.create_pr == 'true')
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # コンフリクト状態に応じてタイトルを設定
          if [ "${{ steps.detect-changes.outputs.has_conflicts }}" == "true" ]; then
            PR_TITLE="🔄 [自動] Upstream同期 - ⚠️ コンフリクトあり (${{ steps.detect-changes.outputs.english_count }}件の翻訳必要)"
          else
            PR_TITLE="🔄 [自動] Upstream同期 - 翻訳必要 (${{ steps.detect-changes.outputs.english_count }}件)"
          fi
          
          # PRボディの作成
          PR_BODY=$(cat <<'EOF'
          ## 🔄 Upstreamからの同期
          
          このPRは[元のリポジトリ](https://github.com/anthropics/claude-code)の最新変更を自動的に取り込みました。
          
          ### 📊 概要
          - 🆕 **新規追加された英語ファイル**: ${{ steps.detect-changes.outputs.added_count }} 件
          - ✏️ **修正された英語ファイル**: ${{ steps.detect-changes.outputs.modified_count }} 件
          - 🗑️ **削除された英語ファイル**: ${{ steps.detect-changes.outputs.deleted_count }} 件
          - 🔤 **翻訳が必要な英語ファイル（合計）**: ${{ steps.detect-changes.outputs.english_count }} 件
          - 🇯🇵 **更新された日本語ファイル**: ${{ steps.detect-changes.outputs.japanese_count }} 件
          - 📅 **同期日時**: $(date +"%Y-%m-%d %H:%M:%S JST")
          EOF
          )
          
          # コンフリクト警告を追加
          if [ "${{ steps.detect-changes.outputs.has_conflicts }}" == "true" ]; then
            PR_BODY="$PR_BODY
          
          ### ⚠️ **マージコンフリクトが発生しています**
          
          コンフリクトの解決が必要です。詳細は \`merge_report.md\` を確認してください。"
          fi
          
          PR_BODY="$PR_BODY
          
          ### 📝 作業手順
          
          1. **差分確認**: \`diff_report.md\` を確認
          2. **翻訳作業**: 
             \`\`\`bash
             # ヘルパースクリプトを実行
             ./translate_helper.sh
             \`\`\`
          3. **翻訳実施**: 各ファイルの差分部分を日本語に翻訳
          4. **コミット**: 翻訳完了後、このPRにコミット
          5. **レビュー**: 翻訳内容を確認してマージ
          
          ### ✅ チェックリスト
          
          - [ ] \`diff_report.md\` の内容を確認
          - [ ] コンフリクトの解決（該当する場合）
          - [ ] 全ての英語ファイルの変更を翻訳
          - [ ] 日本語の表現が自然か確認
          - [ ] リンクや技術用語の整合性確認
          - [ ] 最終レビュー完了
          
          ---
          *🤖 This PR was automatically created by GitHub Actions*"
          
          # PR作成（GitHub CLIを使用）
          gh pr create \
            --base master \
            --head "${{ steps.sync.outputs.branch_name }}" \
            --title "$PR_TITLE" \
            --body "$PR_BODY" \
            --label "translation,upstream-sync,automated" \
            --draft || echo "PR作成をスキップしました（既に存在する可能性があります）"
          
      - name: 📊 サマリーを出力
        if: always()
        run: |
          echo "## 🎉 同期プロセス完了！" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # ステータス表示
          if [ "${{ steps.sync.outcome }}" == "failure" ]; then
            echo "### ❌ 同期に失敗しました" >> $GITHUB_STEP_SUMMARY
            echo "エラーの詳細はログを確認してください。" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.detect-changes.outputs.has_changes }}" == "true" ]; then
            echo "### 📈 変更検出" >> $GITHUB_STEP_SUMMARY
            echo "- 🆕 新規追加: ${{ steps.detect-changes.outputs.added_count }} ファイル" >> $GITHUB_STEP_SUMMARY
            echo "- ✏️ 修正: ${{ steps.detect-changes.outputs.modified_count }} ファイル" >> $GITHUB_STEP_SUMMARY  
            echo "- 🗑️ 削除: ${{ steps.detect-changes.outputs.deleted_count }} ファイル" >> $GITHUB_STEP_SUMMARY
            echo "- 🔤 翻訳が必要（合計）: ${{ steps.detect-changes.outputs.english_count }} ファイル" >> $GITHUB_STEP_SUMMARY
            echo "- 🇯🇵 日本語版更新: ${{ steps.detect-changes.outputs.japanese_count }} ファイル" >> $GITHUB_STEP_SUMMARY
            
            if [ "${{ steps.detect-changes.outputs.has_conflicts }}" == "true" ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### ⚠️ マージコンフリクト" >> $GITHUB_STEP_SUMMARY
              echo "コンフリクトの解決が必要です。詳細はPR内の \`merge_report.md\` を確認してください。" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**ブランチ**: \`${{ steps.sync.outputs.branch_name }}\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ✨ 変更なし" >> $GITHUB_STEP_SUMMARY
            echo "Upstreamに新しい変更はありませんでした。" >> $GITHUB_STEP_SUMMARY
          fi